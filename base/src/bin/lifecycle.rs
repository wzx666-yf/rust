fn main() {
    // 生命周期的主要作用是避免悬垂引用，它会导致程序引用了本不该引用的数据
    // let r;
    // {
    //     let x = 5;
    //     r = &x; //r引用x，但是x在下面的}作用域里被销毁，r就变成了悬垂引用，因此报错
    // }
    // println!("r: {}", r);
    let x = 5;
    println!("x: {}", x);
}
